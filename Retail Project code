# -*- coding: utf-8 -*-      

Automatically generated by Colaboratory.    


# Loading all necessary library     

import pandas as pd    
import numpy as np    
import matplotlib.pyplot as plt   
import seaborn as sns     
from google.colab import files    
import io    

# Loading the dataset    

uploaded = files.upload()    

df = pd.read_csv(io.BytesIO(uploaded['retail_data.csv']), encoding= 'ISO-8859-1')     

df.head()    

df.shape    

df.columns     

df.describe()     

"""**Data Cleaning**     

Before the start of the cleaning process, the dataset is examined to investigate the common areas that may require attention. This process would help determine how clean the data is the steps that would be deed necessary and unnecessary.
"""     

df.info()     

# Check the missing values     

df.isna().sum()     

df.isnull().sum()     

"""From the steps above, it can be observed that this dataset can be classified to be relatively clean. Since there are no missing values, then we can proceed to explore the relationships between the columns in the dataset.

Exploratory Data Analysis (EDA)
"""     

df['ProductCategory'].unique()      

for column in df.columns:    
  unique_columns = df[column].unique()    
  print(f'Unique values in the column "{column}": {unique_columns}')    

# To find the total number of stores represented in the dataset    

len(df['StoreID'].unique())    

# Check the performance of the categories    

df['ProductCategory'].astype('category').value_counts().sort_values()    

# Group the data by 'Product Category' and calculate the profit for each category    

sum_of_Category = df.groupby('ProductCategory')['Profit'].sum()    
sorted_Category = sum_of_Category.sort_values(ascending=False)    

plt.figure(figsize=(8, 6))    
sorted_Category.plot(kind='bar', color='skyblue')    
plt.title('Profit Generated By Product Category')    
plt.xlabel('Product Category')   
plt.ylabel('Profit')    
plt.xticks(rotation=45)    
plt.grid(axis='y')   
plt.show()    

"""The plot above suggests that the difference in profit generated by the various product categories is not particularly significant."""    

# Sales performance by store location    

store_sales = df.groupby('StoreLocation')['Profit'].sum()    
store_sales.sort_values()   

store_sales.sort_values().plot(kind='bar', color='blue')    
plt.title('Profit Generated By Store Location')    
plt.xlabel('Store Location')    
plt.ylabel('Profit')    
plt.xticks(rotation=45)    
plt.grid(axis='y')    
plt.show()    

"""From the plot above, it can be observed that all store locations generated over 700,000 in profit. However, San Antonio generated the least profit while phonix generated the most profit."""     

# Check the sales trend over time    

df['PurchaseDate'] = pd.to_datetime(df['PurchaseDate'])    
monthly_sales = df.resample('M', on='PurchaseDate').size()    
monthly_sales.plot(title = 'Monthly Sales Trend')    
plt.show()    

# Total Revenue and Profit Margins    
total_revenue = df['Profit'].sum()    
total_cost = df['ProductCost'].sum()    
profit_margin = (total_revenue / total_cost) * 100    
profit_margin    

import seaborn as sns    

# Spending Patterns    
sns.scatterplot(x = 'AnnualIncome', y = 'SpendingScore', data = df, hue = 'Gender')    

df['Gender'].value_counts()    

"""As suspected from the scatterplot above, and confirmed by counter the number of each, the proportion of male to female customers is very close."""    

# Purchasing Behaviour     

average_purchase_amount = df['ProductPrice'].mean()     
purchase_frequency = df['CustomerID'].nunique() / df['PurchaseDate'].nunique()    
print("The average purchase amount is: ", average_purchase_amount)    
print("The purchase frequency is: ", purchase_frequency)    

# Foot traffic vs Profit    

sns.scatterplot(x = 'FootTraffic', y = 'Profit', data = df)    

# Inventory levels vs Sales    

sns.lineplot( x = 'InventoryLevel', y = 'Profit', data = df)   

payment_method_distribution = df['PaymentMethod'].value_counts()    
payment_method_distribution.sort_values()    

# Profitability analysis     

profitability_by_category = df.groupby('ProductCategory')['Profit'].mean()    
profitability_by_category.sort_values()    

# Correlation heatmap     

correlation_df = df[['AnnualIncome', 'SpendingScore', 'ProductPrice', 'DiscountApplied',
                    'DiscountPercent', 'ProductCost', 'Profit', 'FootTraffic',
                    'InventoryLevel', 'MarketingExpenditure', 'CompetitorPrice']]    
correlation_matrix = correlation_df.corr()   

plt.figure(figsize=(12, 10))  # Adjust the width and height as needed    

sns.heatmap(correlation_matrix, annot=True)    

# Add title    
plt.title('Correlation Matrix')    

# Display the plot   
plt.show()   

"""The correation matrix above shoes the level of crrelation between the numerical columns. The deeper the color, the less the correlation and the lighter the colour, the more the correlation.     

Hence, product Price and competitor price, Product cost and competitor price, are highly correlated.     
"""

# PLotting Age by the Spending Score in the data     
# Grouping the data by 'Age' and 'Spending Score', and then counting the occurrences     


spending_score_by_age = df.groupby(['Age', 'SpendingScore']).size().reset_index()    
spending_by_age = spending_score_by_age.loc[spending_score_by_age.groupby('Age')[0].idxmax()]    


plt.figure(figsize=(12, 6))     
sns.barplot(x='Age', y=spending_score_by_age[0], hue='SpendingScore', data=spending_by_age)     
plt.title('Spending Score by Age Group')    
plt.xlabel('Age')    
plt.ylabel('Count')     
plt.xticks(rotation=45)     
plt.legend(title='Spending Scores', bbox_to_anchor=(1.05, 1), loc='upper left')    
plt.tight_layout()   
plt.show()     

# plot to find out if there is a relationship between promo and sales increase but the plot shows none    

plt.figure(figsize=(8, 6))     
sns.barplot(x='DiscountApplied', y='SpendingScore', data=df, estimator=np.median, ci=None)    
plt.title('Discount Applied by Spending Score')    
plt.xlabel('Discount Applied')    
plt.ylabel('Spending Score')     
plt.grid(True)    
plt.tight_layout()    
plt.show()     

# Grouping the data by 'Location' and calculating summary statistics     

location_review_stats = df.groupby('StoreLocation')['SpendingScore'].describe()    
location_review_stats    

# PLotting Age by the most item purchased for each age in the data    
# Grouping the data by 'Age' and 'Item Purchased', and then counting the occurrences     

# age_item_counts = df.groupby(['Age', 'SpendingScore']).size().reset_index()    
spending_score_by_age = df.groupby(['StoreLocation', 'SpendingScore']).size().reset_index()     
spending_by_age = spending_score_by_age.loc[spending_score_by_age.groupby('StoreLocation')[0].idxmax()] # Finding the most purchased item for each age group     
#most_purchased_by_age = spending_score_by_age.loc[spending_score_by_age.groupby('Age')[0].idxmax()]     

plt.figure(figsize=(8, 6))    
sns.barplot(x='StoreLocation', y=spending_score_by_age[0], hue='SpendingScore', data=spending_by_age)    
plt.title('Spending Score by Age Group')    
plt.xlabel('Age')    
plt.ylabel('Count')    
plt.xticks(rotation=45)  # Rotate x-axis labels for better readability    
plt.legend(title='Spending Scores', bbox_to_anchor=(1.05, 1), loc='upper left')    
plt.tight_layout()    
plt.show()    
